!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);function o(){}function r(t){return t()}function u(){return Object.create(null)}function c(t){t.forEach(r)}function l(t){return"function"==typeof t}function d(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}new Set;function i(t,e){t.appendChild(e)}function a(t,e,n){t.insertBefore(e,n||null)}function s(t){t.parentNode.removeChild(t)}function f(t){return document.createElement(t)}function p(t){return document.createTextNode(t)}function $(){return p(" ")}function m(t,e,n,o){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n,o)}function h(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}function y(t,e){e=""+e,t.data!==e&&(t.data=e)}let b;function g(t){b=t}const v=[],x=[],_=[],w=[],k=Promise.resolve();let E=!1;function C(){E||(E=!0,k.then(S))}function O(t){_.push(t)}function S(){const t=new Set;do{for(;v.length;){const t=v.shift();g(t),j(t.$$)}for(;x.length;)x.pop()();for(let e=0;e<_.length;e+=1){const n=_[e];t.has(n)||(n(),t.add(n))}_.length=0}while(v.length);for(;w.length;)w.pop()();E=!1}function j(t){t.fragment&&(t.update(t.dirty),c(t.before_update),t.fragment.p(t.dirty,t.ctx),t.dirty=null,t.after_update.forEach(O))}const q=new Set;function M(t,e){t&&t.i&&(q.delete(t),t.i(e))}"undefined"!=typeof window?window:global;let P;function L(t,e){t.$$.fragment&&(c(t.$$.on_destroy),t.$$.fragment.d(e),t.$$.on_destroy=t.$$.fragment=null,t.$$.ctx={})}function T(t,e,n,d,i,a){const s=b;g(t);const f=e.props||{},p=t.$$={fragment:null,ctx:null,props:a,update:o,not_equal:i,bound:u(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(s?s.$$.context:[]),callbacks:u(),dirty:null};let $=!1;var m;p.ctx=n?n(t,f,(e,n)=>{p.ctx&&i(p.ctx[e],p.ctx[e]=n)&&(p.bound[e]&&p.bound[e](n),$&&function(t,e){t.$$.dirty||(v.push(t),C(),t.$$.dirty=u()),t.$$.dirty[e]=!0}(t,e))}):f,p.update(),$=!0,c(p.before_update),p.fragment=d(p.ctx),e.target&&(e.hydrate?p.fragment.l((m=e.target,Array.from(m.childNodes))):p.fragment.c(),e.intro&&M(t.$$.fragment),function(t,e,n){const{fragment:o,on_mount:u,on_destroy:d,after_update:i}=t.$$;o.m(e,n),O(()=>{const e=u.map(r).filter(l);d?d.push(...e):c(e),t.$$.on_mount=[]}),i.forEach(O)}(t,e.target,e.anchor),S()),g(s)}"undefined"!=typeof HTMLElement&&(P=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}$destroy(){L(this,1),this.$destroy=o}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(){}});class z{$destroy(){L(this,1),this.$destroy=o}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(){}}function A(t){var e,n,r,u,l,d,b,g,v,x,_,w,k,E,C,O,S;return{c(){e=f("p"),n=f("span"),r=p(t.count),u=p(" * 2 = "),l=p(t.doubled),d=p("\n  , and\n  "),b=f("span"),g=p(t.doubled),v=p(" * 2 = "),x=p(t.quadrupled),_=$(),w=f("button"),k=p("Increment counter: "),E=p(t.count),C=$(),(O=f("button")).textContent="Reset",h(e,"class","svelte-10zy88m"),S=[m(w,"click",t.handleClick),m(O,"click",t.reset)]},m(t,o){a(t,e,o),i(e,n),i(n,r),i(n,u),i(n,l),i(e,d),i(e,b),i(b,g),i(b,v),i(b,x),a(t,_,o),a(t,w,o),i(w,k),i(w,E),a(t,C,o),a(t,O,o)},p(t,e){t.count&&y(r,e.count),t.doubled&&(y(l,e.doubled),y(g,e.doubled)),t.quadrupled&&y(x,e.quadrupled),t.count&&y(E,e.count)},i:o,o:o,d(t){t&&(s(e),s(_),s(w),s(C),s(O)),c(S)}}}function B(t,e,n){let o,r,u=1;return t.$$.update=(t={count:1,doubled:1})=>{t.count&&n("doubled",o=2*u),t.doubled&&n("quadrupled",r=2*o)},{count:u,handleClick:function(){n("count",u+=1),console.log("inc count")},reset:function(){n("count",u=1)},doubled:o,quadrupled:r}}var I=class extends z{constructor(t){var e;super(),document.getElementById("svelte-10zy88m-style")||((e=f("style")).id="svelte-10zy88m-style",e.textContent="p.svelte-10zy88m{margin:0}",i(document.head,e)),T(this,t,B,A,d,[])}},N=document.getElementById("svelte-example-dfigure");N.addEventListener("ready",function(){var t=N.querySelector("#svelte-example-target");new I({target:t})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,